snippet RMQ
//{{{ ************[         RMQ          ]************
// 1. Range query, single value update
// 2. IDENTITY: merge (IDENTITY, anything) = anything
//              merge (IDENTITY, IDENTITY) = IDENTITY 

typedef int RMQ_TYPE;
const RMQ_TYPE IDENTITY = ;

struct RMQ {
    int leaf;
    RMQ_TYPE ST [MAX_N << 1];

    RMQ_TYPE merge (RMQ_TYPE &x, RMQ_TYPE &y) {
        return 0; // return merged value
    }

    void build (int n, RMQ_TYPE a []) {
        leaf = n;

        REP (i, leaf) ST [leaf + i] = a [i]; // change here
        ROF (i, leaf - 1) ST [i] = merge (ST [i << 1], ST [i << 1 | 1]);
    }

    void upd (int i, RMQ_TYPE x) {
        for (ST [i += leaf] = x; i > 1; i >>= 1)
            ST [i >> 1] = merge (ST [i], ST [i ^ 1]);
    }

    // for cases when order matters, ex: CF-380C
    RMQ_TYPE ask (int L, int R) { // [L, R]
        RMQ_TYPE retL = IDENTITY;
        RMQ_TYPE retR = IDENTITY;
        for (L += leaf, R += leaf; L <= R; L >>= 1, R >>= 1) {
            if ( L & 1) retL = merge (retL, ST [L++]);
            if (~R & 1) retR = merge (ST [R--], retR);
        }
        return merge (retL, retR);
    }
};
//}}}
endsnippet
